# -*- coding: utf-8 -*-
"""python basics

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LDZWf8O433cK9gVWnorNhpUE3VfNqVIw
"""

print("Hello,World!")

Name = "Rustam Arora "
age = "19"
print(f"My name is {Name} and I am {age} years old.")

#Write code to print all the pre-defined keywords in Python using the keyword library.
import keyword

# Print all the pre-defined Python keywords
print("List of Python keywords:")
for kw in keyword.kwlist:
    print(kw)

import keyword

# Function to check if a word is a Python keyword
def check_keyword(word):
    if keyword.iskeyword(word):
        print(f"'{word}' is a Python keyword.")
    else:
        print(f"'{word}' is NOT a Python keyword.")

# Input from the user
word = input("Enter a word to check if it is a Python keyword: ").strip()

# Call the function
check_keyword(word)

# Creating a list and a tuple
my_list = [1, 2, 3, 4]
my_tuple = (1, 2, 3, 4)

# Attempting to change an element in the list
print("Original list:", my_list)
my_list[1] = 99  # Changing the second element
print("Modified list:", my_list)

# Attempting to change an element in the tuple
print("\nOriginal tuple:", my_tuple)
try:
    my_tuple[1] = 99  # Trying to change the second element
except TypeError as e:
    print("Error when modifying tuple:", e)

#Write a program to demonstrate the use of logical operators0
def logical_operators_demo(a, b, c):
    print("Demonstrating Logical Operators:\n")

    # Using 'and' operator
    print("Using 'and' operator:")
    print(f"{a} > {b} and {b} < {c}:", a > b and b < c)  # Both conditions must be True
    print(f"{a} > {b} and {b} > {c}:", a > b and b > c)

    # Using 'or' operator
    print("\nUsing 'or' operator:")
    print(f"{a} > {b} or {b} > {c}:", a > b or b > c)  # At least one condition must be True
    print(f"{a} < {b} or {b} > {c}:", a < b or b > c)

    # Using 'not' operator
    print("\nUsing 'not' operator:")
    print(f"not({a} > {b}):", not (a > b))  # Negates the result
    print(f"not({a} < {b}):", not (a < b))

# Input values
a = 10
b = 5
c = 20

# Calling the function
logical_operators_demo(a, b, c)

# Write a for loop to print numbers from 1 to 100
for i in range(1, 101):
    print(i)

#Write a Python program to find the sum of all even numbers between 1 and 50.
sum_of_evens = 0

# Loop through numbers from 1 to 50
for i in range(1, 51):
    if i % 2 == 0:  # Check if the number is even
        sum_of_evens += i  # Add the even number to the sum

# Print the result
print("The sum of all even numbers between 1 and 50 is:", sum_of_evens)

# Write code to demonstrate type casting with list elements
mixed_list = [1, 2.5, '3', '4.7', True, 'False']

print("Original List:", mixed_list)

# Demonstrating type casting with list elements
# Cast elements to integers
int_list = []
for elem in mixed_list:
    try:
        int_list.append(int(float(elem)))  # Convert to float first to handle strings like '4.7'
    except ValueError:
        print(f"Cannot convert '{elem}' to integer.")

print("\nList with Elements Cast to Integers:")
print(int_list)

# Cast elements to floats
float_list = []
for elem in mixed_list:
    try:
        float_list.append(float(elem))
    except ValueError:
        print(f"Cannot convert '{elem}' to float.")

print("\nList with Elements Cast to Floats:")
print(float_list)

# Cast elements to strings
string_list = [str(elem) for elem in mixed_list]
print("\nList with Elements Cast to Strings:")
print(string_list)

# Cast elements to booleans
bool_list = [bool(elem) for elem in mixed_list]
print("\nList with Elements Cast to Booleans:")
print(bool_list)

# Write a Python program to calculate the factorial of a number provided by the user using a while loop.
num = int(input("Enter a non-negative integer: "))

# Initialize variables
factorial = 1
current = num

# Ensure the input is valid
if num < 0:
    print("Factorial is not defined for negative numbers.")
else:
    # Calculate factorial using while loop
    while current > 0:
        factorial *= current
        current -= 1

    # Display the result
    print(f"The factorial of {num} is: {factorial}")

#Write a function to demonstrate the behavior of mutable and immutable arguments.
def demonstrate_arguments(mutable_list, immutable_int):
    print("Inside Function:")

    # Modify the mutable argument (list)
    mutable_list.append(100)
    print(f"Modified Mutable List: {mutable_list}")

    # Modify the immutable argument (integer)
    immutable_int += 10
    print(f"Modified Immutable Integer: {immutable_int}")

# Initial values
my_list = [1, 2, 3]
my_int = 5

print("Before Function Call:")
print(f"Original List (Mutable): {my_list}")
print(f"Original Integer (Immutable): {my_int}")

# Call the function
demonstrate_arguments(my_list, my_int)

print("\nAfter Function Call:")
print(f"List After Function Call: {my_list}")
print(f"Integer After Function Call: {my_int}")

#Write a program that checks if a number is positive, negative, or zero.
num = float(input("Enter a number: "))

# Check conditions
if num > 0:
    print("The number is Positive.")
elif num < 0:
    print("The number is Negative.")
else:
    print("The number is Zero.")

# Original list with mixed types
mixed_list = ['10', '20.5', '30', '40.7', 'True', 'hello', '50']

# Demonstrating type casting to integers
int_list = []
for elem in mixed_list:
    try:
        int_list.append(int(float(elem)))  # Convert to float first to handle decimals
    except ValueError:
        print(f"Cannot convert '{elem}' to integer.")
print("List after casting to Integers:", int_list)

# Demonstrating type casting to floats
float_list = []
for elem in mixed_list:
    try:
        float_list.append(float(elem))
    except ValueError:
        print(f"Cannot convert '{elem}' to float.")
print("List after casting to Floats:", float_list)

# Demonstrating type casting to booleans
bool_list = [bool(elem) for elem in mixed_list]
print("List after casting to Booleans:", bool_list)

# Demonstrating type casting to strings
string_list = [str(elem) for elem in mixed_list]
print("List after casting to Strings:", string_list)